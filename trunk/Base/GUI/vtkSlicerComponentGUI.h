#ifndef __vtkSlicerComponentGUI_h
#define __vtkSlicerComponentGUI_h

#include "vtkObject.h"
#include "vtkKWObject.h"

class vtkSlicerApplicationGUI;
class vtkSlicerApplicationLogic;
class vtkKWWindowBase;
class vtkKWApplication;
class vtkSlicerGUIUpdate;


// Description:
// This is a base class that all SlicerGUIs get derived from.
// A GUI can access its Slicer look & feel through its
// "App" data member. 
//
class vtkSlicerComponentGUI : public vtkKWObject
{

 public:
    static vtkSlicerComponentGUI* New ( );
    vtkTypeRevisionMacro ( vtkSlicerComponentGUI, vtkKWObject );

    // GUI FUNCTIONS:
    virtual int BuildGUI ( vtkSlicerApplicationGUI *app ) { return 1; }
    virtual void SetWindow ( vtkKWWindowBase *win );
    vtkKWWindowBase *GetWindow ( );
    virtual void SetSlicerApplication ( vtkSlicerApplicationGUI *app );
    vtkSlicerApplicationGUI *GetSlicerApplication ( );
    virtual void SetKwApplication ( vtkKWApplication *app ) ;
    vtkKWApplication *GetKwApplication ( );

    // MEDIATOR FUNCTiONS:
    virtual void SetLogic ( vtkSlicerApplicationLogic *logic );
    vtkSlicerApplicationLogic *GetLogic ( );
    // Description:
    // Create observers on widgets defined in this class using the following paradigm:
    // this->AddCallbackCommandObserver ( ObservedWidget, vtkCommand::SomeEvent);
    virtual void AddGUIObservers ( ) { }
    // Description:
    // Create observers on logic in application layer using the vtk paradigm:
    // Logic->mylogic->AddObserver ( vtkCommand::ModifiedEvent, this->LogicCommand);
    virtual void AddLogicObservers ( ) { }
    // propagate events generated by kwwidgets to application layer
    virtual void ProcessCallbackCommandEvents ( vtkObject *caller,
                                                unsigned long event,
                                                void *callData );
    // propagate events generated in application layer to GUI
    virtual void ProcessLogicEvents ( vtkObject *caller, unsigned long event,
                                void *callData );
    
    
 protected:
    // pointer to the window in which the GUI is displayed.
    vtkKWWindowBase *Win;
    // pointer to the vtkSlicerApplicationGUI to which GUI belongs.
    vtkSlicerApplicationGUI *SlicerApp;
    // pointer to the vtkKWApplication to which GUI belongs.
    vtkKWApplication *KWapp;
    
    // GUI's interface to the application layer;
    vtkSlicerApplicationLogic *Logic;
    vtkSlicerGUIUpdate *LogicCommand;

    // constructor, destructor.
    vtkSlicerComponentGUI ( );
    ~vtkSlicerComponentGUI ( );
    
 private:
    vtkSlicerComponentGUI ( const vtkSlicerComponentGUI& ); // Not implemented.
    void operator = ( const vtkSlicerComponentGUI& ); // Not implemented.
};


#endif


