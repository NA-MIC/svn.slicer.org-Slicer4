#ifndef __vtkFetchMIGUI_h
#define __vtkFetchMIGUI_h

#include "vtkSlicerBaseGUIWin32Header.h"
#include "vtkSlicerModuleGUI.h"

#include "vtkMRMLScene.h"
#include "vtkFetchMILogic.h"
#include "vtkMRMLFetchMINode.h"
#include "vtkIntArray.h"


class vtkSlicerNodeSelectorWidget;
class vtkFetchMIQueryTermWidget;
class vtkFetchMIFlatResourceWidget;
class vtkFetchMIResourceUploadWidget;

class vtkKWFrame;
class vtkKWFrameWithLabel;
class vtkKWPushButton;
class vtkKWEntry;
class vtkKWMenuButton;
class vtkKWEntryWithLabel;
class vtkFetchMIIcons;

class VTK_FETCHMI_EXPORT vtkFetchMIGUI : public vtkSlicerModuleGUI
{
  public:
  static vtkFetchMIGUI *New();
  vtkTypeMacro(vtkFetchMIGUI,vtkSlicerModuleGUI);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Description:
  // Set the logic pointer from parent class pointer.
  // Overloads implementation in vtkSlicerModulesGUI
  // to allow loadable modules.
  virtual void SetModuleLogic ( vtkSlicerLogic *logic )
  {
  this->SetLogic(reinterpret_cast<vtkFetchMILogic*> (logic)); 
  }

  vtkGetStringMacro (DataDirectoryName);
  vtkSetStringMacro (DataDirectoryName);
  
   // Description: Get/Set MRML node
  vtkGetObjectMacro (Logic, vtkFetchMILogic);
  vtkSetObjectMacro (Logic, vtkFetchMILogic);
  
  // Description: Get/Set MRML node
  vtkGetObjectMacro (FetchMINode, vtkMRMLFetchMINode);
  vtkSetObjectMacro (FetchMINode, vtkMRMLFetchMINode);

  vtkGetObjectMacro ( QueryList, vtkFetchMIQueryTermWidget );
  vtkGetObjectMacro ( ResourceList, vtkFetchMIFlatResourceWidget );
  vtkGetObjectMacro ( TaggedDataList, vtkFetchMIResourceUploadWidget );
  vtkGetObjectMacro ( AddServerButton, vtkKWPushButton );
  vtkGetObjectMacro ( ServerMenuButton, vtkKWMenuButton );
  vtkGetObjectMacro ( AddServerEntry, vtkKWEntry );
  vtkGetObjectMacro ( FetchMIIcons, vtkFetchMIIcons );
  vtkGetObjectMacro ( QueryTagsButton, vtkKWPushButton );

  // Description:
  // Create widgets
  virtual void BuildGUI ( );
  virtual void TearDownGUI ( );

  // Description:
  // Add obsereves to GUI widgets
  virtual void AddGUIObservers ( );

  vtkIntArray* NewObservableEvents();
  
  // Description:
  // Remove obsereves to GUI widgets
  virtual void RemoveGUIObservers ( );
  virtual void RemoveMRMLNodeObservers ( );
  virtual void RemoveLogicObservers ( );
  
  // Description:
  // Pprocess events generated by Logic
  virtual void ProcessLogicEvents ( vtkObject *caller, unsigned long event,
                                  void *callData ){};

  // Description:
  // Pprocess events generated by GUI widgets
  virtual void ProcessGUIEvents ( vtkObject *caller, unsigned long event,
                                  void *callData );

  // Description:
  // Pprocess events generated by MRML
  virtual void ProcessMRMLEvents ( vtkObject *caller, unsigned long event, 
                                  void *callData);
  // Description:
  // Describe behavior at module startup and exit.
  virtual void Enter ( ){};
  virtual void Exit ( ){};
  virtual void Init ( );

protected:
  vtkFetchMIGUI();
  ~vtkFetchMIGUI();
  vtkFetchMIGUI(const vtkFetchMIGUI&);
  void operator=(const vtkFetchMIGUI&);

  // Description:
  // Updates GUI widgets based on parameters values in MRML node
  void UpdateGUI();
  void UpdateTagTableFromMRML();
  void UpdateResourceTableFromMRML();
  void UpdateSceneTableFromMRML();
  void AddMRMLSceneRow();
  void AddVolumeNodes();
  void AddModelNodes();
  void AddUnstructuredGridNodes();

  // Description:
  // Apply selected tags to selected data.
  void TagSelectedData();
  void ShowAllTagView();
  
  // Description:
  // Updates parameters values in MRML node based on GUI widgets 
  void UpdateMRML();

  
  vtkFetchMILogic *Logic;
  vtkMRMLFetchMINode* FetchMINode;
  vtkFetchMIQueryTermWidget *QueryList;
  vtkFetchMIFlatResourceWidget *ResourceList;
  vtkFetchMIResourceUploadWidget *TaggedDataList;
  vtkKWPushButton *AddServerButton;
  vtkKWMenuButton *ServerMenuButton;
  vtkKWEntry *AddServerEntry;
  vtkKWPushButton *QueryTagsButton;
  vtkFetchMIIcons *FetchMIIcons;

  char *DataDirectoryName;
  int UpdatingGUI;
  int UpdatingMRML;

};

#endif

