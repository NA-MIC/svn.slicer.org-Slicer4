/*=========================================================================

  Copyright Brigham and Women's Hospital (BWH) All Rights Reserved.

  See Doc/copyright/copyright.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Program:   vtkITK
  Module:    $HeadURL: http://www.na-mic.org/svn/Slicer3/trunk/Libs/vtkITK/vtkITKArchetypeImageSeriesReader.h $
  Date:      $Date: 2008-03-11 13:22:52 -0500 (Tue, 11 Mar 2008) $
  Version:   $Revision: 6159 $

==========================================================================*/

// .NAME vtkITKTimeSeriesDatabase - Effeciently process large datasets in small memory
// .SECTION Description
// TimeSeriesDatabase creates a database on disk from a series of volumes
// stored on disk.  The database allows efficient access to volumes,
// slices and voxels through time. 
//
// \note
// This work is part of the National Alliance for Medical Image Computing 
// (NAMIC), funded by the National Institutes of Health through the NIH Roadmap
// for Medical Research, Grant U54 EB005149.

#ifndef __vtkITKTimeSeriesDatabase_h
#define __vtkITKTimeSeriesDatabase_h

#include "vtkImageSource.h"
#include "itkTimeSeriesDatabase.h"
#include <vector>
#include <string>

#include "vtkITK.h"

class VTK_ITK_EXPORT vtkITKTimeSeriesDatabase : public vtkImageSource
{
public:
  static vtkITKTimeSeriesDatabase *New();
  vtkTypeRevisionMacro(vtkITKTimeSeriesDatabase,vtkImageSource);
  void PrintSelf(ostream& os, vtkIndent indent);   

  // Create a TimeSeriesDatabase from a series of volumes
  static void CreateFromFileArchetype ( const char* TSDFilename, const char* ArchetypeFilename );

  
protected:
  vtkITKTimeSeriesDatabase() {
    m_Filter = SourceType::New();
    this->itkExporter = ImageExportType::New();
    this->vtkExporter = vtkImageExport::New();
    Connecting ( this->itkExporter, this->vtkImporter );
    this->itkExporter->SetInput ( m_Filter->GetOutput() );
  };
  ~vtkITKTimeSeriesDatabase() {
  }
    
  (c-set-offset 'substatement-open  0)


  typedef short InputImagePixelType;
  typedef short OutputImagePixelType;
  typedef itk::Image<OutputImagePixelType, 3> OutputImageType;
  typedef itk::VTKImageExport<OutputImageType> ImageExportType;
  typedef itk::TimeSeriesDatabase<OutputImagePixelType> SourceType;

  SourceType::Pointer m_Filter;
  ImageExportType::Pointer itkExporter;
  vtkImageExport* vtkExporter;  
  

  char *Archetype;
  int SingleFile;
  int DataExtent[6];

  int OutputScalarType;
  int NumberOfComponents;

  double DefaultDataSpacing[3];
  double DefaultDataOrigin[3];

  int FileNameSliceOffset;
  int FileNameSliceSpacing;
  int FileNameSliceCount;
  
  vtkMatrix4x4* RasToIjkMatrix;

  char UseNativeCoordinateOrientation;
  char UseNativeScalarType;
  bool UseNativeOrigin;

//BTX
  std::vector<std::string> FileNames;
  CoordinateOrientationCode DesiredCoordinateOrientation;
//ETX
  virtual void ExecuteInformation();
  // defined in the subclasses
  virtual void ExecuteData(vtkDataObject *data);

//BTX
  itk::MetaDataDictionary Dictionary;
//ETX
  
private:
  vtkITKTimeSeriesDatabase(const vtkITKTimeSeriesDatabase&);  // Not implemented.
  void operator=(const vtkITKTimeSeriesDatabase&);  // Not implemented.

  // relevant GE private tags
  //static gdcm::DictEntry GEDictBValue( 0x0043, 0x1039, "IS", "1", "B Value of diffusion weighting" );
  //static gdcm::DictEntry GEDictXGradient( 0x0019, 0x10bb, "DS", "1", "X component of gradient direction" );
  //static gdcm::DictEntry GEDictYGradient( 0x0019, 0x10bc, "DS", "1", "Y component of gradient direction" );
  //static gdcm::DictEntry GEDictZGradient( 0x0019, 0x10bd, "DS", "1", "Z component of gradient direction" );

  //// relevant Siemens private tags
  //static gdcm::DictEntry SiemensMosiacParameters( 0x0051, 0x100b, "IS", "1", "Mosiac Matrix Size" );
  //static gdcm::DictEntry SiemensDictNMosiac( 0x0019, 0x100a, "US", "1", "Number of Images In Mosaic" );     
  //static gdcm::DictEntry SiemensDictBValue( 0x0019, 0x100c, "IS", "1", "B Value of diffusion weighting" );       
  //static gdcm::DictEntry SiemensDictDiffusionDirection( 0x0019, 0x100e, "FD", "3", "Diffusion Gradient Direction" );    
  //static gdcm::DictEntry SiemensDictDiffusionMatrix( 0x0019, 0x1027, "FD", "6", "Diffusion Matrix" );       


};

#endif
