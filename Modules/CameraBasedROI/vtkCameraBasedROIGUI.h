#ifndef __vtkCameraBasedROIGUI_h
#define __vtkCameraBasedROIGUI_h

#include "vtkCameraBasedROIWin32Header.h"
#include "vtkSlicerModuleGUI.h"

#include "vtkMRMLScene.h"
#include "vtkMRMLCameraBasedROINode.h"
#include "vtkCameraBasedROILogic.h"


// Had to add this to force loading of these support libraries
// Only libraries with entries that will be dynamically called from TCL need to be instantiated
#include "vtkTcl.h"
extern "C" int Vtkslicercamerabasedroimodulelogic_Init(Tcl_Interp *interp);

class vtkKWFrame;
class vtkSlicerNodeSelectorWidget;
class vtkSlicerModuleCollapsibleFrame;
class vtkKWScaleWithEntry;

class vtkIntArray;

class VTK_CAMERABASEDROI_EXPORT vtkCameraBasedROIGUI : public vtkSlicerModuleGUI
{
  public:
  static vtkCameraBasedROIGUI *New();
  vtkTypeMacro(vtkCameraBasedROIGUI,vtkSlicerModuleGUI);
  void PrintSelf(ostream& os, vtkIndent indent);

  vtkGetObjectMacro ( ParameterSelector, vtkSlicerNodeSelectorWidget );
  vtkGetObjectMacro ( CameraSelector, vtkSlicerNodeSelectorWidget );
  vtkGetObjectMacro ( ROISelector, vtkSlicerNodeSelectorWidget );

  // Description:
  // Set the logic pointer from parent class pointer.
  // Overloads implementation in vtkSlicerModulesGUI
  // to allow loadable modules.
  virtual void SetModuleLogic ( vtkSlicerLogic *logic )
  {
  this->SetLogic(reinterpret_cast<vtkCameraBasedROILogic*> (logic)); 
  }

   // Description: Get/Set MRML node
  vtkGetObjectMacro (Logic, vtkCameraBasedROILogic);
  vtkSetObjectMacro (Logic, vtkCameraBasedROILogic);

  virtual void BuildGUI ( );
  //BTX
  using vtkSlicerComponentGUI::BuildGUI; 
  //ETX
  virtual void TearDownGUI ( );


  // Description:
  // Add obsereves to GUI widgets
  virtual void AddGUIObservers ( );
  virtual void AddMRMLObservers ( );

  // Description:
  // Remove obsereves to GUI widgets
  virtual void RemoveGUIObservers ( );
  virtual void RemoveMRMLObservers ( );
  
  // Description:
  // Pprocess events generated by GUI widgets
  virtual void ProcessGUIEvents ( vtkObject *caller, unsigned long event,
                                  void *callData );

  // Description:
  // Pprocess events generated by MRML
  virtual void ProcessMRMLEvents ( vtkObject *caller, unsigned long event, 
                                  void *callData);
  // Description:
  // Describe behavior at module startup and exit.
  virtual void Enter ( );
  //BTX
  using vtkSlicerComponentGUI::Enter; 
  //ETX
  virtual void Exit ( );
  virtual void Init ( );

  // Description:
  // Get the categorization of the module.  The category is used for
  // grouping modules together into menus.
  const char *GetCategory() const {return "EndoNav";}


protected:
  vtkCameraBasedROIGUI();
  ~vtkCameraBasedROIGUI();
  vtkCameraBasedROIGUI(const vtkCameraBasedROIGUI&);
  void operator=(const vtkCameraBasedROIGUI&);

  vtkMRMLCameraBasedROINode   *CameraBasedROINode;
  vtkMRMLCameraNode           *CameraNode;
  vtkKWScaleWithEntry*        DistanceScale;
  vtkKWScaleWithEntry*        SizeScale;

  vtkCameraBasedROILogic  *Logic;


  // Description:
  // Updates GUI widgets based on parameters values in MRML node
  void UpdateGUI();

  // Description:
  // updates status text in the slicer window.
  void SetSlicerText( const char *txt);

  void CreateParameterNode();

  void UpdateParameterNode();

  vtkSlicerNodeSelectorWidget *ParameterSelector;
  vtkSlicerNodeSelectorWidget *CameraSelector;
  vtkSlicerNodeSelectorWidget *ROISelector;
  vtkSlicerModuleCollapsibleFrame *SpecificationFrame;
 
  int UpdatingGUI;
  int UpdatingMRML;

 
  // Description:
  // This flag gets set when the module is entered,
  // and unset when the module is exited. It is used
  // to put observers on and off the MRML Scene.
  bool Raised;

};

#endif

